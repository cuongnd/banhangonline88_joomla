<?php/** * @package    Joomla.Administrator * * @copyright  Copyright (C) 2005 - 2016 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Joomla system checks.@ini_set('magic_quotes_runtime', 0);@ini_set('max_execution_time', 5); //300 seconds = 5 minutes// System includesrequire_once JPATH_LIBRARIES . '/import.legacy.php';// Set system error handlingJError::setErrorHandling(E_NOTICE, 'message');JError::setErrorHandling(E_WARNING, 'message');JError::setErrorHandling(E_ERROR, 'message', array('JError', 'customErrorPage'));// Bootstrap the CMS libraries.require_once JPATH_LIBRARIES . '/cms.php';$version = new JVersion;// Installation check, and check on removal of the install directory.if (!file_exists(JPATH_CONFIGURATION . '/configuration.php')	|| (filesize(JPATH_CONFIGURATION . '/configuration.php') < 10)	|| (file_exists(JPATH_INSTALLATION . '/index.php') && (false === $version->isInDevelopmentState()))){	if (file_exists(JPATH_INSTALLATION . '/index.php'))	{		header('Location: ../installation/index.php');		exit();	}	else	{		echo 'No configuration file found and no installation code available. Exiting...';		exit;	}}// Pre-Load configuration. Don't remove the Output Buffering due to BOM issues, see JCode 26026ob_start();require_once JPATH_CONFIGURATION . '/configuration.php';ob_end_clean();// System configuration.$config = new JConfig;// Set the error_reportingswitch ($config->error_reporting){	case 'default':	case '-1':		error_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED & ~E_STRICT & ~E_WARNING);		ini_set('display_errors', 1);		break;	case 'none':	case '0':		error_reporting(0);		break;	case 'simple':		error_reporting(E_ERROR | E_WARNING | E_PARSE);		ini_set('display_errors', 1);		break;	case 'maximum':		error_reporting(E_ALL);		ini_set('display_errors', 1);		break;	case 'development':		error_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED & ~E_STRICT & ~E_WARNING);		ini_set('display_errors', 1);		break;	default:		error_reporting($config->error_reporting);		ini_set('display_errors', 1);		break;}define('JDEBUG', $config->debug);unset($config);// System profilerif (JDEBUG){	$_PROFILER = JProfiler::getInstance('Application');}declare(ticks=1);function tick_handler() {	global $backtrace;	$backtrace=debug_backtrace();	//$GLOBALS['dbg_stack'][] = debug_backtrace();	//writeLog($backtrace);}function shutdown() {	global $backtrace;	$output     = "";	$output .= "<hr /><div> Error" .  '<br /><table border="1" cellpadding="2" cellspacing="2">';	$stacks     = $backtrace;	$output .= "<thead><tr><th><strong>File</strong></th><th><strong>Line</strong></th><th><strong>Function</strong></th><th><strong>args</strong></th>".		"</tr></thead>";	foreach($stacks as $_stack)	{		$args=$_stack["args"];		//$args=implode(',',$args);		if (!isset($_stack['file'])) $_stack['file'] = '[PHP Kernel]';		if (!isset($_stack['line'])) $_stack['line'] = '';		$output .=  "<tr><td>{$_stack["file"]}</td><td>{$_stack["line"]}</td>".			//"<td>{$_stack["function"]}</td>".			"<td>$args</td>".			"</tr>";	}	$output .=  "</table></div><hr /></p>";	echo $output;}//register_tick_function('tick_handler');if(JDEBUG){	register_tick_function('tick_handler');	register_shutdown_function('shutdown');}