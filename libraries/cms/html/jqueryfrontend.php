<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2016 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for jQuery JavaScript behaviors * * @since  3.0 */abstract class JHtmlJqueryFrontend{    /**     * @var    array  Array containing information for loaded files     * @since  3.0     */    protected static $loaded = array();    /**     * Method to load the jQuery JavaScript framework into the document head     *     * If debugging mode is on an uncompressed version of jQuery is included for easier debugging.     *     * @param   boolean $noConflict True to load jQuery in noConflict mode [optional]     * @param   mixed $debug Is debugging mode on? [optional]     * @param   boolean $migrate True to enable the jQuery Migrate plugin     *     * @return  void     *     * @since   3.0     */    public static function framework($noConflict = true, $debug = null, $migrate = true)    {        // Only load once        if (!empty(static::$loaded[__METHOD__])) {            return;        }        // If no debugging value is set, use the configuration setting        $doc = JFactory::getDocument();        $doc->addScript('/media/juifrontend/js/jquery-1.11.1.min.js');        $doc->addScript('/media/juifrontend/js/jquery-noconflict.min.js');        $doc->addScript('/media/juifrontend/js/jquery.easing.min.1.3.js');        $doc->addScript('/media/juifrontend/js/jquery-migrate.min.js');        // Check if we are loading in noConflict        static::$loaded[__METHOD__] = true;        return;    }    public static function ui($noConflict = true, $debug = null, $migrate = true)    {        // Only load once        if (!empty(static::$loaded[__METHOD__])) {            return;        }        // If no debugging value is set, use the configuration setting        $doc = JFactory::getDocument();        $doc->addScript("/media/juifrontend/js/jquery-ui-1.11.1/ui/core.js");        $doc->addScript("/media/juifrontend/js/jquery-ui-1.11.1/ui/widget.js");        $doc->addScript("/media/juifrontend/js/jquery-ui-1.11.1/ui/mouse.js");        $doc->addScript("/media/juifrontend/js/jquery-ui-1.11.1/ui/position.js");        $doc->addScript("/media/juifrontend/js/jquery-ui-1.11.1/ui/button.js");        // Check if we are loading in noConflict        static::$loaded[__METHOD__] = true;        return;    }    public static function cookie($debug = null)    {        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/juifrontend/js/jquery-cookie-master/src/jquery.cookie.js');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function dreymodal($debug = null)    {        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/juifrontend/js/Animated-jQuery-Modal/src/js/dreyanim.min.js');            $doc->addScript('/media/juifrontend/js/Animated-jQuery-Modal/src/js/dreymodal.min.js');            $doc->addStyleSheet('/media/juifrontend/js/Animated-jQuery-Modal/src/css/dreyanim.css');            $doc->addStyleSheet('/media/juifrontend/js/Animated-jQuery-Modal/src/css/dreymodal.css');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function slick($debug = null)    {        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/system/js/slick-master/slick/slick.min.js');            $doc->addLessStyleSheet('/media/system/js/slick-master/slick/slick.less');            $doc->addLessStyleSheet('/media/system/js/slick-master/slick/slick-theme.less');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function core($debug = null)    {        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $app=JFactory::getApplication();            $enqueueMessage=$app->getMessageQueue();            $doc->addScript('/templates/core.js');            self::bootstrap_notify();            ob_start();            ?>            <script type="text/javascript">                jQuery(document).ready(function ($) {                    $("body").core_website({                        enqueueMessage:<?php echo json_encode(reset($enqueueMessage)) ?>                    });                });            </script>            <?php            $js_content = ob_get_clean();            $js_content = JUtility::remove_string_javascript($js_content);            $doc->addScriptDeclaration($js_content);            static::$loaded[__METHOD__] = true;        }        return;    }    public static function gmaps($debug = null)    {        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/system/js/frontend/jquery.picker_gmaps/js/google_map_api.js');            $doc->addScript('/media/system/js/frontend/gmaps-master/gmaps.js');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function pickup_location($debug = null)    {        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/juifrontend/js/jquery.picker_gmaps/js/google_map_api.js');            $doc->addScript('/media/juifrontend/js/jquery.picker_gmaps/js/jquery-gmaps-latlon-picker.js');            $doc->addStyleSheet('/media/juifrontend/js/jquery.picker_gmaps/css/jquery-gmaps-latlon-picker.css');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function template($debug = null)    {        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/templates/vina_bonnie/js/template.js');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function utility($debug = null)    {        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/juifrontend/js/jquery.utility.min.js');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function hikashop($debug = null)    {        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        if ($debug === null) {            $config = JFactory::getConfig();            $debug = (boolean)$config->get('debug');        }        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/com_hikashop/js/hikashop.min.js');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function sly($debug = null)    {        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/system/js/sly-master/dist/sly.min.js');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function long_text_truncating($debug = null)    {        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/system/js/long_text_truncating/src/jquery.dotdotdot.min.js');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function lazyload($debug = null)    {        static::framework();        // If no debugging value is set, use the configuration setting        if ($debug === null) {            $config = JFactory::getConfig();            $debug = (boolean)$config->get('debug');        }        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/system/js/lazy-load-xt-master/dist/jquery.lazyloadxt.min.js');            $doc->addScript('/media/system/js/lazy-load-xt-master/dist/jquery.lazyloadxt.extra.min.js');            $doc->addStyleSheet(JUri::root() . 'media/system/js/lazy-load-xt-master/dist/jquery.lazyloadxt.fadein.css');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function countdown($debug = null)    {        static::framework();        // If no debugging value is set, use the configuration setting        if ($debug === null) {            $config = JFactory::getConfig();            $debug = (boolean)$config->get('debug');        }        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/juibackend/js/jquery.countdown/dest/jquery.countdown.js');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function base64($debug = null)    {        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/juifrontend/js/jquery.base64.js');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function sprintf($debug = null)    {        static::framework();        // If no debugging value is set, use the configuration setting        if ($debug === null) {            $config = JFactory::getConfig();            $debug = (boolean)$config->get('debug');        }        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/system/js/jquery-sprintf/jquery.sprintf.js');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function moment($debug = null)    {        static::framework();        // If no debugging value is set, use the configuration setting        if ($debug === null) {            $config = JFactory::getConfig();            $debug = (boolean)$config->get('debug');        }        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/system/js/moment-develop/moment.js');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function bootstrap_notify($debug = null)    {        static::framework();        // If no debugging value is set, use the configuration setting        if ($debug === null) {            $config = JFactory::getConfig();            $debug = (boolean)$config->get('debug');        }        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/juifrontend/js/bootstrap-notify-master/bootstrap-notify.min.js');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function shadowbox($debug = null)    {        static::framework();        // If no debugging value is set, use the configuration setting        if ($debug === null) {            $config = JFactory::getConfig();            $debug = (boolean)$config->get('debug');        }        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/juifrontend/js/jquery_shadowbox/shadowbox.min.js');            $doc->addStyleSheet('/media/juifrontend/js/jquery_shadowbox/shadowbox.css');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function magnific_popup($debug = null)    {        static::framework();        // If no debugging value is set, use the configuration setting        if ($debug === null) {            $config = JFactory::getConfig();            $debug = (boolean)$config->get('debug');        }        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/juifrontend/js/magnific-popup-master/dist/jquery.magnific-popup.js');            $doc->addStyleSheet('/media/juifrontend/js/magnific-popup-master/dist/magnific-popup.css');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function serialize_object($debug = null)    {        static::framework();        // If no debugging value is set, use the configuration setting        if ($debug === null) {            $config = JFactory::getConfig();            $debug = (boolean)$config->get('debug');        }        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/system/js/jquery.serializeObject.js');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function webui_popover($debug = null)    {        $jquery_webui_popover_compress = false;        $jquery_webui_popover_compress_css = true;        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        if ($debug === null) {            $config = JFactory::getConfig();            $debug = (boolean)$config->get('debug');        }        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/juifrontend/js/webui-popover-1.2.17/dist/jquery.webui-popover.min.js');            $doc->addLessStyleSheet('/media/juifrontend/js/webui-popover-1.2.17/dist/jquery.webui-popover.min.css');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function simplemarquee($debug = null)    {        $jquery_webui_popover_compress = false;        $jquery_webui_popover_compress_css = true;        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        if ($debug === null) {            $config = JFactory::getConfig();            $debug = (boolean)$config->get('debug');        }        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/juifrontend/js/jQuery-Plugin-To-Scroll-Text-Like-The-Marquee-Element-simpleMarquee/lib/jquery.simplemarquee.js');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function hikamarket($debug = null)    {        $jquery_hikamarket_compress = true;        $jquery_hikamarket_compress_css = true;        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        if ($debug === null) {            $config = JFactory::getConfig();            $debug = (boolean)$config->get('debug');        }        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/com_hikamarket/js/hikamarket.min.js');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function less($debug = null)    {        $jquery_less_compress = true;        $jquery_less_compress_css = true;        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript("/media/system/js/less-1.5.0.js");            static::$loaded[__METHOD__] = true;        }        return;    }    public static function sidr($debug = null)    {        $jquery_sidr_compress = false;        $jquery_sidr_compress_css = false;        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        if ($debug === null) {            $config = JFactory::getConfig();            $debug = (boolean)$config->get('debug');        }        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript("/media/system/js/sidr-master/dist/jquery.sidr.min.js");            $doc->addStyleSheet("/media/system/js/sidr-master/dist/stylesheets/jquery.sidr.light.css");            static::$loaded[__METHOD__] = true;        }        return;    }    public static function help_step($debug = null)    {        JHtml::_('jQuery.auo_typing_text');        JHtml::_('jQuery.texttospeak');        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript("/media/system/js/intro.js-2.3.0/intro.js");            $doc->addStyleSheet("/media/system/js/sidr-master/dist/stylesheets/jquery.sidr.light.css");            static::$loaded[__METHOD__] = true;        }        return;    }    public static function auo_typing_text($debug = null)    {        $jquery_auo_typing_text_compress = true;        $jquery_auo_typing_text_css = true;        // Include jQuery        static::framework();        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript("/media/system/js/auo_typing_text/jquery.teletype.js");            static::$loaded[__METHOD__] = true;        }        return;    }    public static function suggestion($debug = null)    {        $jquery_auo_typing_text_compress = true;        $jquery_auo_typing_text_css = true;        // Include jQuery        static::framework();        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript("/media/juifrontend/js/jquery-flexdatalist-2.1.1/jquery.flexdatalist.min.js");            $doc->addLessStyleSheet("/media/juifrontend/js/jquery-flexdatalist-2.1.1/jquery.flexdatalist.min.css");            static::$loaded[__METHOD__] = true;        }        return;    }    public static function animate($debug = null)    {        $jquery_auo_typing_text_compress = true;        $jquery_auo_typing_text_css = true;        // Include jQuery        static::framework();        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addLessStyleSheet("/media/juifrontend/animate.css");            static::$loaded[__METHOD__] = true;        }        return;    }    public static function animate_wow($debug = null)    {        $jquery_auo_typing_text_compress = true;        $jquery_auo_typing_text_css = true;        // Include jQuery        static::framework();        self::animate($debug);        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/juifrontend/js/WOW-master/dist/wow.min.js');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function TubePlayer($debug = null)    {        $jquery_auo_typing_text_compress = true;        $jquery_auo_typing_text_css = true;        // Include jQuery        static::framework();        self::animate($debug);        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/juifrontend/js/jQuery-TubePlayer-Plugin-master/dist/jquery.tubeplayer.min.js');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function autocomplete($debug = null)    {        $jquery_auo_typing_text_compress = true;        $jquery_auo_typing_text_css = true;        // Include jQuery        static::framework();        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript("/media/juifrontend/js/vyasrao-tAutocomplete/tautocomplete.js");            $doc->addLessStyleSheet("/media/juifrontend/js/vyasrao-tAutocomplete/tautocomplete.css");            static::$loaded[__METHOD__] = true;        }        return;    }    public static function image($debug = null)    {        $jquery_auo_typing_text_compress = true;        $jquery_auo_typing_text_css = true;        // Include jQuery        static::framework();        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript("/media/juifrontend/js/jquery.image.min.js");            static::$loaded[__METHOD__] = true;        }        return;    }    public static function uisortable($debug = null)    {        $jquery_auo_typing_text_compress = true;        $jquery_auo_typing_text_css = true;        // Include jQuery        static::framework();        static::ui();        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript("/media/juifrontend/js/jquery.ui.sortable.js");            static::$loaded[__METHOD__] = true;        }        return;    }    public static function ui_effect($debug = null)    {        $jquery_auo_typing_text_compress = true;        $jquery_auo_typing_text_css = true;        // Include jQuery        static::framework();        static::ui();        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript("/media/juifrontend/js/jquery-ui-1.11.1/ui/effect.js");            static::$loaded[__METHOD__] = true;        }        return;    }    public static function ui_resizable($debug = null)    {        $jquery_auo_typing_text_compress = true;        $jquery_auo_typing_text_css = true;        // Include jQuery        static::framework();        static::ui();        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addLessStyleSheet('/media/juifrontend/js/jquery-ui-1.11.1/themes/base/all.css');            $doc->addScript("/media/juifrontend/js/jquery-ui-1.11.1/ui/resizable.js");            static::$loaded[__METHOD__] = true;        }        return;    }    public static function ui_dialog($debug = null)    {        $jquery_auo_typing_text_compress = true;        $jquery_auo_typing_text_css = true;        // Include jQuery        static::framework();        static::ui();        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript("/media/juifrontend/js/jquery-ui-1.11.1/ui/dialog.js");            static::$loaded[__METHOD__] = true;        }        return;    }    public static function buttons_css3($debug = null)    {        $jquery_auo_typing_text_compress = true;        $jquery_auo_typing_text_css = true;        // Include jQuery        static::framework();        static::ui();        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript("/media/juifrontend/js/Buttons-master/js/buttons.js");            $doc->addStyleSheet("/media/juifrontend/js/Buttons-master/css/buttons.min.css");            static::$loaded[__METHOD__] = true;        }        return;    }    public static function picker_gmaps($debug = null)    {        $jquery_auo_typing_text_compress = true;        $jquery_auo_typing_text_css = true;        // Include jQuery        static::framework();        static::ui();        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/system/js/backend/jquery.picker_gmaps/js/google_map_api.js');            $doc->addScript('/media/system/js/backend/jquery.picker_gmaps/js/jquery-gmaps-latlon-picker.js');            $doc->addStyleSheet('/media/system/js/backend/jquery.picker_gmaps/css/jquery-gmaps-latlon-picker.css');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function squeezeBox($debug = null)    {        $jquery_auo_typing_text_compress = true;        $jquery_auo_typing_text_css = true;        // Include jQuery        static::framework();        static::ui();        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/juifrontend/js/SqueezeBox/SqueezeBox.js');            $doc->addStyleSheet('/media/juifrontend/js/SqueezeBox/assets/SqueezeBox.css');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function feather($debug = null)    {        // Include jQuery        static::framework();        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript("/media/system/js/aviary/feather.js");            static::$loaded[__METHOD__] = true;        }        return;    }    public static function lazyYT($debug = null)    {        // Include jQuery        static::framework();        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript("/media/juifrontend/js/lazyYT-master/lazyYT.min.js");            $doc->addStyleSheet('/media/juifrontend/js/lazyYT-master/lazyYT.css');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function modal($debug = null)    {        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript("/media/system/js/jquery.avgrund.js-master/jquery.avgrund.js");            $doc->addStyleSheet(JUri::root() . 'media/system/js/jquery.avgrund.js-master/style/avgrund.css');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function scrollto($debug = null)    {        $jquery_scrollto_compress = true;        $jquery_scrollto_css_compress = true;        // Include jQuery        static::framework();        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript("/media/system/js/jquery.scrollTo-master/jquery.scrollTo.js");            static::$loaded[__METHOD__] = true;        }        return;    }    public static function MooTools($debug = null)    {        $jquery_scrollto_compress = true;        $jquery_scrollto_css_compress = true;        // Include jQuery        static::framework();        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript("/media/juifrontend/js/MooTools-Core-1.6.0.js");            static::$loaded[__METHOD__] = true;        }        return;    }    public static function flip($debug = null)    {        // Include jQuery        static::framework();        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript("/media/system/js/jquery.flip/dist/jquery.flip.min.js");            static::$loaded[__METHOD__] = true;        }        return;    }    public static function texttospeak($debug = null)    {        // Include jQuery        static::framework();        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript("/media/juifrontend/js/texttospeak/responsivevoice.js");            static::$loaded[__METHOD__] = true;        }        return;    }    public static function notify($debug = null)    {        // Include jQuery        static::framework();        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript("/media/system/js/bootstrap-notify-master/bootstrap-notify.js");            static::$loaded[__METHOD__] = true;        }        return;    }    public static function compression_js($debug = null)    {        // Include jQuery        static::framework();        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            //$doc->addScript("/jscompress.com-master/js/app.js");            static::$loaded[__METHOD__] = true;        }        return;    }    public static function jquery_load_file($debug = null)    {        $app = JFactory::getApplication();        $menu = $app->getMenu();        $active_menu = $menu->getActive();        if (!$active_menu) {            $active_menu = $menu->getDefault();        }        $params = $active_menu->params;        $jquery_load_file = $params->get('jquery_load_file', '');        if (!$jquery_load_file) {            return;        }        JHtml::_('jQuery.help_step');        $jquery_load_file_compress = true;        $jquery_load_file_css_compress = true;        // Include jQuery        static::framework();        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/system/js/jquery_load_file/' . $jquery_load_file);            $js_content = '';            ob_start();            ?>            <script type="text/javascript">                jQuery(document).ready(function ($) {                    $("body").load_page({                        show_help: false,                        enable_audio: true                    });                });            </script>            <?php            $js_content = ob_get_clean();            $js_content = JUtility::remove_string_javascript($js_content);            $doc->addScriptDeclaration($js_content);            static::$loaded[__METHOD__] = true;        }        return;    }    public static function select($debug = null)    {        $app = JFactory::getApplication();        // Include jQuery        static::framework();        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc = JFactory::getDocument();            $doc->addScript("/media/system/js/select2-4.0.0/dist/js/select2.full.js");            $doc->addStyleSheet('/media/system/js/select2-4.0.0/dist/css/select2.css');            $js_content = '';            ob_start();            ?>            <script type="text/javascript">                jQuery(document).ready(function ($) {                });            </script>            <?php            $js_content = ob_get_clean();            $js_content = JUtility::remove_string_javascript($js_content);            $doc->addScriptDeclaration($js_content);            static::$loaded[__METHOD__] = true;        }        return;    }    public static function checkbox($debug = null)    {        $app = JFactory::getApplication();        $jquery_checkbox_compress = true;        $jquery_checkbox_css_compress = true;        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        if ($debug === null) {            $config = JFactory::getConfig();            $debug = (boolean)$config->get('debug');        }        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript("/media/system/js/icheck-1.x/icheck.min.js");            $doc->addStyleSheet('/media/system/js/icheck-1.x/skins/flat/_all.css');            $js_content = '';            ob_start();            ?>            <script type="text/javascript">                jQuery(document).ready(function ($) {                });            </script>            <?php            $js_content = ob_get_clean();            $js_content = JUtility::remove_string_javascript($js_content);            $doc->addScriptDeclaration($js_content);            static::$loaded[__METHOD__] = true;        }        return;    }    public static function appear($debug = null)    {        $app = JFactory::getApplication();        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        if ($debug === null) {            $config = JFactory::getConfig();            $debug = (boolean)$config->get('debug');        }        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript("/media/system/js/jquery.appear-master/jquery.appear.js");            $js_content = '';            ob_start();            ?>            <script type="text/javascript">                jQuery(document).ready(function ($) {                });            </script>            <?php            $js_content = ob_get_clean();            $js_content = JUtility::remove_string_javascript($js_content);            $doc->addScriptDeclaration($js_content);            static::$loaded[__METHOD__] = true;        }        return;    }    public static function scrollbar($debug = null)    {        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        if ($debug === null) {            $config = JFactory::getConfig();            $debug = (boolean)$config->get('debug');        }        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/juifrontend/js/malihu-custom-scrollbar-plugin-master/js/uncompressed/jquery.mousewheel.min-3.0.6.js');            $doc->addScript('/media/juifrontend/js/malihu-custom-scrollbar-plugin-master/js/uncompressed/jquery.mCustomScrollbar.js');            $doc->addStyleSheet('/media/juifrontend/js/malihu-custom-scrollbar-plugin-master/jquery.mCustomScrollbar.css');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function smooth_scroll($debug = null)    {        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        if ($debug === null) {            $config = JFactory::getConfig();            $debug = (boolean)$config->get('debug');        }        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/juifrontend/js/jquery-smooth-scroll-master/jquery.smooth-scroll.js');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function OwlCarousel($debug = null)    {        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        if ($debug === null) {            $config = JFactory::getConfig();            $debug = (boolean)$config->get('debug');        }        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/juifrontend/js/OwlCarousel2-2.2.1/dist/owl.carousel.min.js');            $doc->addStyleSheet('/media/juifrontend/js/OwlCarousel2-2.2.1/dist/assets/owl.carousel.min.css');            $doc->addStyleSheet('/media/juifrontend/js/OwlCarousel2-2.2.1/dist/assets/owl.theme.default.min.css');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function css3_animate_it($debug = null)    {        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        if ($debug === null) {            $config = JFactory::getConfig();            $debug = (boolean)$config->get('debug');        }        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/juifrontend/js/css3-animate-it-master/js/css3-animate-it.js');            $doc->addStyleSheet('/media/juifrontend/js/css3-animate-it-master/css/animations.css');            $doc->addStyleSheet('/media/juifrontend/js/css3-animate-it-master/css/animations-ie-fix.css');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function scroll_to($debug = null)    {        // Include jQuery        static::framework();        // If no debugging value is set, use the configuration setting        if ($debug === null) {            $config = JFactory::getConfig();            $debug = (boolean)$config->get('debug');        }        // Only attempt to load the component if it's supported in core and hasn't already been loaded        if (empty(static::$loaded[__METHOD__])) {            $doc = JFactory::getDocument();            $doc->addScript('/media/juifrontend/js/jquery.scrollTo-master/jquery.scrollTo.js');            static::$loaded[__METHOD__] = true;        }        return;    }    public static function zozo_tab($debug = null)    {        // Include jQuery        static::framework();        $doc = JFactory::getDocument();        $doc->addscript("/media/system/js/zozo_tabs_v.6.5/js/zozo.tabs.js");        $list_file_css = array(            'media/system/js/zozo_tabs_v.6.5/css/zozo.tabs.css',            'media/system/js/zozo_tabs_v.6.5/source/zozo.tabs.core.css',            'media/system/js/zozo_tabs_v.6.5/source/zozo.tabs.responsive.css',            'media/system/js/zozo_tabs_v.6.5/source/zozo.tabs.clean.css',            'media/system/js/zozo_tabs_v.6.5/source/zozo.tabs.themes.css',            'media/system/js/zozo_tabs_v.6.5/source/zozo.tabs.underlined.css',            'media/system/js/zozo_tabs_v.6.5/source/zozo.tabs.vertical.css',            'media/system/js/zozo_tabs_v.6.5/source/zozo.tabs.grid.css',            'media/system/js/zozo_tabs_v.6.5/source/zozo.tabs.mobile.css',            'media/system/js/zozo_tabs_v.6.5/source/zozo.tabs.multiline.css',            'media/system/js/zozo_tabs_v.6.5/source-flat/zozo.tabs.flat.css',            'media/system/js/zozo_tabs_v.6.5/source-flat/zozo.tabs.flat.mobile.css',            'media/system/js/zozo_tabs_v.6.5/source-flat/zozo.tabs.flat.styles.css',            'media/system/js/zozo_tabs_v.6.5/source-flat/zozo.tabs.flat.themes.css',        );        foreach ($list_file_css as $file_css) {            $doc->addStyleSheet("/$file_css");        }        return;    }}