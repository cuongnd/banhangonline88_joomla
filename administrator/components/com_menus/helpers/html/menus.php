<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2016 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('MenusHelper', JPATH_ADMINISTRATOR . '/components/com_menus/helpers/menus.php');/** * Menus HTML helper class. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.7 */abstract class MenusHtmlMenus{    /**     * Generate the markup to display the item associations     *     * @param   int $itemid The menu item id     *     * @return  string     *     * @since   3.0     *     * @throws Exception If there is an error on the query     */    public static function association($itemid)    {        // Defaults        $html = '';        // Get the associations        if ($associations = MenusHelper::getAssociations($itemid)) {            // Get the associated menu items            $db = JFactory::getDbo();            $query = $db->getQuery(true)                ->select('m.id, m.title')                ->select('l.sef as lang_sef')                ->select('mt.title as menu_title')                ->from('#__menu as m')                ->join('LEFT', '#__menu_types as mt ON mt.menutype=m.menutype')                ->where('m.id IN (' . implode(',', array_values($associations)) . ')')                ->join('LEFT', '#__languages as l ON m.language=l.lang_code')                ->select('l.image')                ->select('l.title as language_title');            $db->setQuery($query);            try {                $items = $db->loadObjectList('id');            } catch (runtimeException $e) {                throw new Exception($e->getMessage(), 500);            }            // Construct html            if ($items) {                foreach ($items as &$item) {                    $text = strtoupper($item->lang_sef);                    $url = JRoute::_('index.php?option=com_menus&task=item.edit&id=' . (int)$item->id);                    $tooltipParts = array(                        JHtml::_('image', 'mod_languages/' . $item->image . '.gif',                            $item->language_title,                            array('title' => $item->language_title),                            true                        ),                        $item->title,                        '(' . $item->menu_title . ')'                    );                    $class = 'hasTooltip label label-association label-' . $item->lang_sef;                    $item->link = JHtml::_('tooltip', implode(' ', $tooltipParts), null, null, $text, $url, null, $class);                }            }            $html = JLayoutHelper::render('joomla.content.associations', $items);        }        return $html;    }    /**     * Returns a published state on a grid     *     * @param   integer $value The state value.     * @param   integer $i The row index     * @param   boolean $enabled An optional setting for access control on the action.     * @param   string $checkbox An optional prefix for checkboxes.     *     * @return  string        The Html code     *     * @see JHtmlJGrid::state     *     * @since   1.7.1     */    public static function state($value, $i, $enabled = true, $checkbox = 'cb')    {        $states = array(            9 => array(                'unpublish',                '',                'COM_MENUS_HTML_UNPUBLISH_HEADING',                '',                true,                'publish',                'publish'            ),            8 => array(                'publish',                '',                'COM_MENUS_HTML_PUBLISH_HEADING',                '',                true,                'unpublish',                'unpublish'            ),            7 => array(                'unpublish',                '',                'COM_MENUS_HTML_UNPUBLISH_SEPARATOR',                '',                true,                'publish',                'publish'            ),            6 => array(                'publish',                '',                'COM_MENUS_HTML_PUBLISH_SEPARATOR',                '',                true,                'unpublish',                'unpublish'            ),            5 => array(                'unpublish',                '',                'COM_MENUS_HTML_UNPUBLISH_ALIAS',                '',                true,                'publish',                'publish'            ),            4 => array(                'publish',                '',                'COM_MENUS_HTML_PUBLISH_ALIAS',                '',                true,                'unpublish',                'unpublish'            ),            3 => array(                'unpublish',                '',                'COM_MENUS_HTML_UNPUBLISH_URL',                '',                true,                'publish',                'publish'            ),            2 => array(                'publish',                '',                'COM_MENUS_HTML_PUBLISH_URL',                '',                true,                'unpublish',                'unpublish'            ),            1 => array(                'unpublish',                'COM_MENUS_EXTENSION_PUBLISHED_ENABLED',                'COM_MENUS_HTML_UNPUBLISH_ENABLED',                'COM_MENUS_EXTENSION_PUBLISHED_ENABLED',                true,                'publish',                'publish'            ),            0 => array(                'publish',                'COM_MENUS_EXTENSION_UNPUBLISHED_ENABLED',                'COM_MENUS_HTML_PUBLISH_ENABLED',                'COM_MENUS_EXTENSION_UNPUBLISHED_ENABLED',                true,                'unpublish',                'unpublish'            ),            -1 => array(                'unpublish',                'COM_MENUS_EXTENSION_PUBLISHED_DISABLED',                'COM_MENUS_HTML_UNPUBLISH_DISABLED',                'COM_MENUS_EXTENSION_PUBLISHED_DISABLED',                true,                'warning',                'warning'            ),            -2 => array(                'publish',                'COM_MENUS_EXTENSION_UNPUBLISHED_DISABLED',                'COM_MENUS_HTML_PUBLISH_DISABLED',                'COM_MENUS_EXTENSION_UNPUBLISHED_DISABLED',                true,                'trash',                'trash'            ),            -3 => array(                'publish',                '',                'COM_MENUS_HTML_PUBLISH',                '',                true,                'trash',                'trash'            ),        );        return JHtml::_('jgrid.state', $states, $value, $i, 'items.', $enabled, true, $checkbox);    }    public static function render_html_select_menu_by_extension($extension_id,$attr)    {        require_once JPATH_ROOT .DS. 'administrator/components/com_menus/helpers/menus.php';        $list_menu_type = MenusHelper::get_menu_type();        ob_start();        ?>        <select class="menu" <?php echo $attr ?>>            <option value="0"><?php echo JText::_('All') ?></option>            <option value="-1"><?php echo JText::_('None') ?></option>            <?php foreach($list_menu_type as $menu_type){ ?>                <?php                $list_menu_item = MenusHelper::get_menu_item_by_menu_type($menu_type->menutype,'a.id,a.title,a.parent_id');                $children_menu = array();                foreach ($list_menu_item as $menu_item) {                    $pt = $menu_item->parent_id;                    $pt = ($pt == '' || $pt == $menu_item->id) ? 'list_root' : $pt;                    $list = @$children_menu[$pt] ? $children_menu[$pt] : array();                    array_push($list, $menu_item);                    $children_menu[$pt] = $list;                }                $list_root_position = $children_menu['list_root'];                unset($children_menu['list_root']);                $render_menu=function($function_call_back, $root_menu_id=0, &$list_menu, $children_menu=array(), $level=0, $max_level=999){                    if ($children_menu[$root_menu_id]) {                        $level1=$level+1;                        foreach ($children_menu[$root_menu_id] as $v) {                            $root_menu_id1 = $v->id;                            $v->text=str_repeat("-", $level).$v->title;                            $list_menu[]=$v;                            $function_call_back($function_call_back, $root_menu_id1, $list_menu, $children_menu, $level1, $max_level);                        }                    }                };                $list_menu=array();                $render_menu($render_menu,1,$list_menu,$children_menu);                ?>                <optgroup label="<?php echo $menu_type->title ?>">                    <?php foreach($list_menu AS $menu_item){ ?>                        <option value="<?php echo $menu_item->id ?>"><?php echo $menu_item->text ?></option>                    <?php } ?>                </optgroup>            <?php } ?>        </select>        <?php        $html=ob_get_clean();        return $html;    }    public static function render_html_select_include_menu_by_extension($extension_id,$attr)    {        $db=JFactory::getDbo();        $query=$db->getQuery(true);        $query->select('include_menu')            ->from('#__extensions')            ->where('extension_id='.(int)$extension_id)        ;        $list_include_menu=$db->setQuery($query)->loadResult();        if(trim($list_include_menu)=='')        {            $list_include_menu=json_encode(array(0));        }        $list_include_menu=json_decode($list_include_menu);        require_once JPATH_ROOT .DS. 'administrator/components/com_menus/helpers/menus.php';        $list_menu_type = MenusHelper::get_menu_type();        ob_start();        ?>        <select class="menu" <?php echo $attr ?>>            <option <?php echo in_array(0,$list_include_menu)?'selected':'' ?>  value="0"><?php echo JText::_('All') ?></option>            <option <?php echo in_array(-1,$list_include_menu)?'selected':'' ?>  value="-1"><?php echo JText::_('None') ?></option>            <?php foreach($list_menu_type as $menu_type){ ?>                <?php                $list_menu_item = MenusHelper::get_menu_item_by_menu_type($menu_type->menutype,'a.id,a.title,a.parent_id');                $children_menu = array();                foreach ($list_menu_item as $menu_item) {                    $pt = $menu_item->parent_id;                    $pt = ($pt == '' || $pt == $menu_item->id) ? 'list_root' : $pt;                    $list = @$children_menu[$pt] ? $children_menu[$pt] : array();                    array_push($list, $menu_item);                    $children_menu[$pt] = $list;                }                $list_root_position = $children_menu['list_root'];                unset($children_menu['list_root']);                $render_menu=function($function_call_back, $root_menu_id=0, &$list_menu, $children_menu=array(), $level=0, $max_level=999){                    if ($children_menu[$root_menu_id]) {                        $level1=$level+1;                        foreach ($children_menu[$root_menu_id] as $v) {                            $root_menu_id1 = $v->id;                            $v->text=str_repeat("-", $level).$v->title;                            $list_menu[]=$v;                            $function_call_back($function_call_back, $root_menu_id1, $list_menu, $children_menu, $level1, $max_level);                        }                    }                };                $list_menu=array();                $render_menu($render_menu,1,$list_menu,$children_menu);                ?>                <optgroup label="<?php echo $menu_type->title ?>">                    <?php foreach($list_menu AS $menu_item){ ?>                        <option <?php echo in_array($menu_item->id,$list_include_menu)?'selected':'' ?>  value="<?php echo $menu_item->id ?>"><?php echo $menu_item->text ?></option>                    <?php } ?>                </optgroup>            <?php } ?>        </select>        <?php        $html=ob_get_clean();        return $html;    }    public static function render_html_select_exclude_menu_by_extension($extension_id,$attr)    {        $db=JFactory::getDbo();        $query=$db->getQuery(true);        $query->select('exclude_menu')            ->from('#__extensions')            ->where('extension_id='.(int)$extension_id)        ;        $list_exclude_menu=$db->setQuery($query)->loadResult();        $list_exclude_menu=json_decode($list_exclude_menu);        require_once JPATH_ROOT .DS. 'administrator/components/com_menus/helpers/menus.php';        $list_menu_type = MenusHelper::get_menu_type();        ob_start();        ?>        <select class="menu" <?php echo $attr ?>>            <option <?php echo in_array(0,$list_exclude_menu)?'selected':'' ?> value="0"><?php echo JText::_('All') ?></option>            <option <?php echo in_array(-1,$list_exclude_menu)?'selected':'' ?> value="-1"><?php echo JText::_('None') ?></option>            <?php foreach($list_menu_type as $menu_type){ ?>                <?php                $list_menu_item = MenusHelper::get_menu_item_by_menu_type($menu_type->menutype,'a.id,a.title,a.parent_id');                $children_menu = array();                foreach ($list_menu_item as $menu_item) {                    $pt = $menu_item->parent_id;                    $pt = ($pt == '' || $pt == $menu_item->id) ? 'list_root' : $pt;                    $list = @$children_menu[$pt] ? $children_menu[$pt] : array();                    array_push($list, $menu_item);                    $children_menu[$pt] = $list;                }                $list_root_position = $children_menu['list_root'];                unset($children_menu['list_root']);                $render_menu=function($function_call_back, $root_menu_id=0, &$list_menu, $children_menu=array(), $level=0, $max_level=999){                    if ($children_menu[$root_menu_id]) {                        $level1=$level+1;                        foreach ($children_menu[$root_menu_id] as $v) {                            $root_menu_id1 = $v->id;                            $v->text=str_repeat("-", $level).$v->title;                            $list_menu[]=$v;                            $function_call_back($function_call_back, $root_menu_id1, $list_menu, $children_menu, $level1, $max_level);                        }                    }                };                $list_menu=array();                $render_menu($render_menu,1,$list_menu,$children_menu);                ?>                <optgroup label="<?php echo $menu_type->title ?>">                    <?php foreach($list_menu AS $menu_item){ ?>                        <option <?php echo in_array($menu_item->id,$list_exclude_menu)?'selected':'' ?>  value="<?php echo $menu_item->id ?>"><?php echo $menu_item->text ?></option>                    <?php } ?>                </optgroup>            <?php } ?>        </select>        <?php        $html=ob_get_clean();        return $html;    }}