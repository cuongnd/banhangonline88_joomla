<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2016 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Modules list controller class. * * @since  1.6 */class ModulesControllerModules extends JControllerAdmin{	/**	 * Method to clone an existing module.	 *	 * @return  void	 *	 * @since   1.6	 */	public function __construct($config = array())	{		parent::__construct($config);		$this->registerTask('disable_lazyload', 'enable_lazyload');	}	public function enable_lazyload()	{		// Check for request forgeries		JSession::checkToken() or die(JText::_('JINVALID_TOKEN'));		// Get items to publish from the request.		$cid = JFactory::getApplication()->input->get('cid', array(), 'array');		$data = array('enable_lazyload' => true, 'disable_lazyload' => false);		$task = $this->getTask();		$value = JArrayHelper::getValue($data, $task, 0, 'int');		if (empty($cid))		{			JLog::add(JText::_($this->text_prefix . '_NO_ITEM_SELECTED'), JLog::WARNING, 'jerror');		}		else		{			// Get the model.			$model = $this->getModel();			// Make sure the item ids are integers			JArrayHelper::toInteger($cid);			// Publish the items.			try			{				$model->enable_lazyload($cid, $value);				$errors = $model->getErrors();				if ($value == 1)				{					if ($errors)					{						$app = JFactory::getApplication();						$app->enqueueMessage(JText::plural($this->text_prefix . '_N_ITEMS_FAILED_PUBLISHING', count($cid)), 'error');					}					else					{						$ntext = $this->text_prefix . '_N_ITEMS_ENABLE_LAZYLOAD';					}				}				$this->setMessage(JText::plural($ntext, count($cid)));			}			catch (Exception $e)			{				$this->setMessage($e->getMessage(), 'error');			}		}		$extension = $this->input->get('extension');		$extensionURL = ($extension) ? '&extension=' . $extension : '';		$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list . $extensionURL, false));	}	public function duplicate()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$pks = $this->input->post->get('cid', array(), 'array');		JArrayHelper::toInteger($pks);		try		{			if (empty($pks))			{				throw new Exception(JText::_('COM_MODULES_ERROR_NO_MODULES_SELECTED'));			}			$model = $this->getModel();			$model->duplicate($pks);			$this->setMessage(JText::plural('COM_MODULES_N_MODULES_DUPLICATED', count($pks)));		}		catch (Exception $e)		{			JError::raiseWarning(500, $e->getMessage());		}		$this->setRedirect('index.php?option=com_modules&view=modules');	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Module', $prefix = 'ModulesModel', $config = array('ignore_request' => true))	{		return parent::getModel($name, $prefix, $config);	}}