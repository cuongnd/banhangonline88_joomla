var conf={port:8888,debug:false,dbPort:6379,dbHost:"127.0.0.1",dbOptions:{},mainroom:"MainRoom"};var express=require("express"),http=require("http"),events=require("events"),_=require("underscore"),sanitize=require("validator").sanitize;var app=express(),server=http.createServer(app);server.listen(conf.port);app.configure(function(){app.use(express.bodyParser());app.use(express.static(__dirname+"/static"))});var io=require("socket.io")(server);var redis=require("socket.io-redis");
io.adapter(redis({host:conf.dbHost,port:conf.dbPort}));var db=require("redis").createClient(conf.dbPort,conf.dbHost);var logger=new events.EventEmitter;logger.on("newEvent",function(event,data){console.log("%s: %s",event,JSON.stringify(data))});var requireAuthentication=function(req,res,next){next()};
var sendBroadcast=function(text){_.each(io.nsps["/"].adapter.rooms,function(sockets,room){var message={"room":room,"userName":"",name:"ServerBot","msg":text,"date":new Date};io.to(room).emit("newMessage",message)});logger.emit("newEvent","newBroadcastMessage",{"msg":text})};app.get("/",function(req,res){res.send(200,"Welcome to chat server")});app.post("/api/broadcast/",requireAuthentication,function(req,res){sendBroadcast(req.body.msg);res.send(201,"Message sent to all rooms")});var clients={};
var messengerHistory={};var listRoomUsingSameToken={};var listRoom={};
io.sockets.on("connection",function(socket){var ip=socket.request.socket.remoteAddress;var addedUser=false;logger.emit("newEvent","userConnected",{"socket":socket.id});var name=socket.handshake.query["name"];var system_user_id=socket.handshake.query["system_user_id"];var userName=socket.handshake.query["userName"];var title=socket.handshake.query["title"];var old_socket_id=socket.handshake.query["old_socket_id"];var os=socket.handshake.query["os"];var token=socket.handshake.query["token"];socket.name=
name;socket.system_user_id=system_user_id;socket.userName=userName;socket.old_socket_id=old_socket_id;socket.ip=ip;socket.token=token;if(typeof listRoomUsingSameToken[socket.token]=="undefined")listRoomUsingSameToken[socket.token]=[];db.hset([socket.id,"connectionDate",new Date],redis.print);db.hset([socket.id,"socketId",socket.id],redis.print);db.hset([socket.id,"userName",userName],redis.print);db.hset([socket.id,"system_user_id",system_user_id],redis.print);db.hset([socket.id,"name",name],redis.print);
db.hset([socket.id,"old_socket_id",old_socket_id],redis.print);db.hset([socket.id,"os",os],redis.print);db.hset([socket.id,"ip",ip],redis.print);db.hset([socket.id,"token",token],redis.print);var current_user={id:system_user_id,name:name,userName:userName,socketId:socket.id,token:socket.token,old_socket_id:old_socket_id,system_user_id:system_user_id,ip:ip};socket.emit("connected",{socketId:socket.id});clients[socket.id]=current_user;update_user_online(socket,clients,io);if(old_socket_id!=0)for(var room in listRoom)if(listRoom.hasOwnProperty(room)){var listSocketId=
listRoom[room];var index_of_socket_id=listSocketId.indexOf(old_socket_id);if(index_of_socket_id>-1){listRoom[room].splice(index_of_socket_id,1);listRoom[room].push(socket.id);socket.join(room);break}}for(var room in listRoom){var listSocket=io.sockets.sockets;listSocket.forEach(function(itemSocket){if(userName==itemSocket.userName)itemSocket.join(room)})}socket.join(conf.mainroom);logger.emit("newEvent","userJoinsRoom",{"socket":socket.id,"room":conf.mainroom});socket.emit("subscriptionConfirmed",
{"room":conf.mainroom});var data={"room":conf.mainroom,name:socket.name,"userName":socket.userName,"msg":"----- Joined the room -----","socketId":socket.id,"id":null};io.to(conf.mainroom).emit("userJoinsRoom",data);var data={"room":conf.mainroom,name:socket.name,"userName":socket.userName,"msg":"viewing page:"+title,"socketId":socket.id,"id":null};io.to(conf.mainroom).emit("sendDocumentPage",data);var listMessenger=messengerHistory[conf.mainroom];if(typeof listMessenger=="undefined")listMessenger=
[];data={listMessenger:listMessenger};logger.emit("newEvent","getListMessenger",data);socket.emit("getListMessenger",data);socket.on("subscribe",function(data){var client_socket_id=data.client_socket_id;var clientUserName=data.clientUserName;var list=io.sockets.sockets;var client_socket=null;console.log("Connected sockets:");list.forEach(function(s){if(client_socket_id==s.id)client_socket=s});db.hget([socket.id,"name"],function(err,name){_.each(data.rooms,function(room){room=room.replace(" ","");
socket.join(room);if(typeof listRoom[room]=="undefined")listRoom[room]=[];listRoom[room].push(socket.id);var index_of_room=listRoomUsingSameToken[socket.token].indexOf(room);if(index_of_room==-1)listRoomUsingSameToken[socket.token].push(room);updateJoinRoomSocketUseTogetheruserName(clientUserName,room);if(client_socket!=null){client_socket.join(room);if(typeof listRoom[room]=="undefined")listRoom[room]=[];listRoom[room].push(client_socket.id)}logger.emit("newEvent","userJoinsRoom",{"socket":socket.id,
name:name,"userName":socket.userName,"room":room});socket.emit("subscriptionConfirmed",{"room":room,"client_socket_id":data.client_socket_id,"clientUserName":data.clientUserName,"name":data.name,"userName":data.userName});var message={"room":room,"userName":userName,"name":name,"msg":"----- Joined the room -----","socketId":socket.id};io.to(room).emit("userJoinsRoom",message)})})});socket.on("unsubscribe",function(data){logger.emit("newEvent","unsubscribe",data);db.hget([socket.id,"name"],function(err,
name){_.each(data.rooms,function(room){if(room!=conf.mainroom){socket.leave(room);var index_of_room=listRoomUsingSameToken[socket.token].indexOf(room);if(index_of_room>-1)listRoomUsingSameToken[socket.token].splice(index_of_room,1);logger.emit("newEvent","userLeavesRoom",{"socket":socket.id,"name":name,"userName":socket.userName,"room":room});socket.emit("unsubscriptionConfirmed",{"room":room});var message={"room":room,"name":name,"userName":socket.userName,"msg":"----- Left the room -----","id":null};
io.to(room).emit("userLeavesRoom",message)}})})});socket.on("getRooms",function(data){socket.emit("roomsReceived",socket.rooms);logger.emit("newEvent","userGetsRooms",{"socket":socket.id})});socket.on("getUsersInRoom",function(data){var usersInRoom=[];var socketsInRoom=_.keys(io.nsps["/"].adapter.rooms[data.room]);for(var i=0;i<socketsInRoom.length;i++)db.hgetall(socketsInRoom[i],function(err,obj){usersInRoom.push({"room":data.room,"userName":obj.userName,"id":null});if(usersInRoom.length==socketsInRoom.length)socket.emit("usersInRoom",
{"users":usersInRoom})})});socket.on("setNickname",function(data){socket.name=name;db.hget([socket.id,"name"],function(err,userName){db.hset([socket.id,"name",data.name],redis.print);console.log("thu hien doi ten tren server");var system_user_id=socket.system_user_id;var current_user={name:data.name,userName:socket.userName,socketId:socket.id,system_user_id:system_user_id,ip:socket.ip,token:socket.token};clients[socket.id]=current_user;updateNameTOSocketUseTogetherToken(socket,data);update_user_online(socket,
clients,io);_.each(socket.rooms,function(room){if(room){var info={"room":room,"oldName":name,"newName":data.name,"id":null};logger.emit("newEvent","userSetsNickname",{"socket":socket.id,"oldName":name,"newName":data.name});io.to(room).emit("userNicknameUpdated",info)}})})});socket.on("newMessage",function(data){var listMessenger=messengerHistory[data.room];if(typeof listMessenger=="undefined")listMessenger=[];if(listMessenger.length>100)listMessenger.pop();var msg_key=create_random_number_key(6);
var msgItem=data;msgItem.msg_key=msg_key;msgItem.socketId=socket.id;msgItem.name=socket.name;msgItem.token=socket.token;msgItem.ip=socket.ip;msgItem.userName=socket.userName;msgItem.system_user_id=socket.system_user_id;logger.emit("newEvent","msgItem",msgItem);listMessenger.push(msgItem);messengerHistory[data.room]=listMessenger;var client_socket_id=data.client_socket_id;db.hgetall(socket.id,function(err,obj){if(err)return logger.emit("newEvent","error",err);if(_.contains(_.values(socket.rooms),data.room)){var message=
{"socketId":socket.id,msg_key:msg_key,token:socket.token,"client_socket_id":client_socket_id,"room":data.room,system_user_id:socket.system_user_id,"userName":socket.userName,name:socket.name,"msg":data.msg,"date":new Date};io.to(data.room).emit("newMessage",message);logger.emit("newEvent","newMessage",message)}})});socket.on("getListMessenger",function(data){var listMessenger=messengerHistory[data.room];if(typeof listMessenger=="undefined")listMessenger=[];console.log(listMessenger);io.to(data.room).emit("getListMessenger",
listMessenger)});socket.on("getListUserOnline",function(data){socket.emit("getListUserOnline",clients);logger.emit("newEvent","getListUserOnline",clients)});socket.on("getListSupportUserOnline",function(data){socket.emit("getListSupportUserOnline",clients);logger.emit("newEvent","getListSupportUserOnline",clients)});socket.on("getSocketId",function(data){socket.emit("returnSocketId",{socketId:socket.id})});socket.on("getMyRoom",function(data){var old_socket_id=socket.old_socket_id;var listMyRoom=
[];if(old_socket_id!=0)for(var room in listRoom)if(listRoom.hasOwnProperty(room)){var listSocketId=listRoom[room];var index_of_socket_id=listSocketId.indexOf(old_socket_id);if(index_of_socket_id>-1){listMyRoom.push(room);break}}socket.emit("responseRoom",{listMyRoom:listMyRoom})});socket.on("disconnect",function(client){delete clients[socket.id];update_user_online(socket,clients,io);var rooms=socket.rooms;db.hgetall(socket.id,function(err,obj){if(err)return logger.emit("newEvent","error",err);logger.emit("newEvent",
"userDisconnected",{"socket":socket.id,name:obj.name,"userName":obj.userName});_.each(rooms,function(room){if(room){var message={"room":room,"name":obj.name,"userName":obj.userName,"msg":"----- Left the room -----","id":null};io.to(room).emit("userLeavesRoom",message)}})});db.del(socket.id,redis.print)})});
function update_user_online(socket,clients,io){console.log("list user online");console.log(clients);var key_emit="update-list-user-online";socket.broadcast.emit(key_emit,clients);io.sockets.emit(key_emit,clients)}if(conf.debug)setInterval(function(){var text="Testing rooms";sendBroadcast(text)},6E4);
create_random_key=function(length){if(typeof length==="undefined")length=6;var text="";var possible="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";for(var i=0;i<length;i++)text+=possible.charAt(Math.floor(Math.random()*possible.length));return text};create_random_number_key=function(length){if(typeof length==="undefined")length=6;var text="";var possible="0123456789";for(var i=0;i<length;i++)text+=possible.charAt(Math.floor(Math.random()*possible.length));return text};
updateNameTOSocketUseTogetherToken=function(socket,data){var listSocket=io.sockets.sockets;for(var socketId in clients){var current_user=clients[socketId];var token=current_user.token;if(socket.id!=current_user.socketId&&socket.token==token)listSocket.forEach(function(itemSocket){if(current_user.socketId==itemSocket.id){var info={"oldName":socket.name,"newName":data.name};itemSocket.emit("userNicknameUpdatedLable",info)}})}};
updateJoinRoomSocketUseTogetheruserName=function(clientUserName,room){var listSocket=io.sockets.sockets;listSocket.forEach(function(itemSocket){if(itemSocket.userName==clientUserName)itemSocket.join(room)})};
