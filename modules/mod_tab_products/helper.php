<?phprequire_once JPATH_ROOT . DS . 'administrator/components/com_hikashop/helpers/helper.php';/** * Created by PhpStorm. * User: cuongnd * Date: 9/8/2016 * Time: 8:57 AM */class Modtab_productsHelper{    const MOD_TAB_PRODUCTS_TAB_ACTIVE ='mod_tab_products_' ;    public static $list_md5;    protected static $instances = null;    public static function getInstance()    {        if (empty(static::$instances)) {            static::$instances = new static();        }        return static::$instances;    }    public static function get_list_category_product($params, $deconstruction=null,$module=null)    {        $debug=JUtility::get_debug();        $session = JFactory::getSession();        $tab_active = $session->get(Modtab_productsHelper::MOD_TAB_PRODUCTS_TAB_ACTIVE . $module->id, 0);        if (isset($deconstruction) && $deconstruction) {            $categoryHelper = hikashop_get('class.category');            $categories = $params->get('categories', '');            $list_all_category = $categories;            return $list_all_category;        }        $db = JFactory::getDbo();        $query = $db->getQuery(true);        $categoryHelper = hikashop_get('class.category');        $categories = $params->get('categories', '');        $list_current_category=array();        foreach ($categories as $cat_id) {            $list_current_category[$cat_id]=$categoryHelper->get($cat_id,true);        }        $list_all_category = $categoryHelper->getChilds($categories, false,array(),'',0,100,true);        $list_all_category1 = $categoryHelper->getChilds($categories, true,array(),'',0,100,false,'a.category_id');        $a_list_all_category1=array();        foreach($list_all_category1 as $item){            $a_list_all_category1[]=$item->category_id;        }        $selected_key=array(            "category_id",            "category_parent_id",            "category_type",            "category_name",            "category_alias",            "parent_category_name",            "file_path",            "icon_file_path",            "category_medium_image_file_path",        );        foreach($list_all_category as &$item){            foreach($item as $key=>$value ){                if(!in_array($key,$selected_key)){                    unset($item->$key);            }            }        }        $list_all_category = JArrayHelper::pivot($list_all_category, 'category_id');        $list_tree_category = array();        foreach ($list_all_category as $v) {            $pt = $v->category_parent_id;            $pt = ($pt == '' || $pt == $v->category_id) ? 'list_root' : $pt;            $list = @$list_tree_category[$pt] ? $list_tree_category[$pt] : array();            array_push($list, $v);            $list_tree_category[$pt] = $list;        }        $get_tree_data = function ($function_call_back, $root_id = 0, &$tree_data, $list_tree_category, $level = 0) {            if(isset($list_tree_category[$root_id]) && array_key_exists($root_id, $list_tree_category)  )foreach ($list_tree_category[$root_id] as $category) {                $root_id1 = $category->category_id;                if (!in_array($category->category_id, $tree_data)) {                    $tree_data[] = $category->category_id;                }                $level1 = $level + 1;                $function_call_back($function_call_back, $root_id1, $tree_data, $list_tree_category, $level1);            }        };        $list_return_category = array();        $categories = $params->get('categories', '');        $list_all_category_id[] = 0;        $i=0;        foreach ($categories as $cat_id) {            $tree_data = array();            $get_tree_data($get_tree_data, $cat_id, $tree_data, $list_tree_category, 0);            array_unshift($tree_data, $cat_id);            $list_all_category_id = array_merge($list_all_category_id, $tree_data);            if($tab_active==$i||$i==1){                $list_return_category[$cat_id]->list_sub_category_detail = $list_tree_category[$cat_id];                $list_return_category[$cat_id]->list_category = $tree_data;            }            $list_return_category[$cat_id]->detail = $list_current_category[$cat_id];            $i++;        }        $list_all_category_id=array_merge($a_list_all_category1,$list_all_category_id);        $query->clear()            ->select('product.product_id,product_category.category_id,product.product_name,product.product_code')            ->from('#__hikashop_product AS product')            ->leftJoin('#__hikashop_product_category AS product_category ON product_category.product_id=product.product_id')            ->where('product_category.category_id IN(' . implode(',', $list_all_category_id) . ')')            ->where('product.product_published=1')            ->leftJoin('#__hikashop_file AS file ON file.file_ref_id=product.product_id')            ->where('file.file_type=' . $query->q('product'))            ->select('GROUP_CONCAT(file.file_path SEPARATOR  ";") AS list_image')            ->leftJoin('#__hikashop_price AS price ON price.price_product_id=product.product_id')            ->select('price.price_value')            ->group('product.product_id');        $order_by = $params->get('order_by', 'best_sale');        $sort_type = $params->get('sort_type', 'DESC');        if ($order_by == 'best_sale') {            $query->order("product_sales $sort_type");        } elseif ($order_by == 'last_product') {            $query->order("product_created $sort_type");        } elseif ($order_by == 'new_update') {            $query->order("product_modified $sort_type");        } elseif ($order_by == 'random') {            $query->order("RAND()");        } elseif ($order_by == 'hot') {            $query->order("product_total_vote $sort_type");        } elseif ($order_by == 'hit') {            $query->order("product_hit $sort_type");        }        $manufacturer = $params->get('manufacturer', '');        $db->setQuery($query);        //echo $query->dump();        //die;        $list_product = $db->loadObjectList();        $max_product = $params->get('max_product', 20);        $max_view_small_product = $params->get('max_view_small_product', 10);        foreach ($list_product as $product) {            foreach ($list_return_category as $key => $item) {                $list_category = $item->list_category;                if (in_array($product->category_id, $list_all_category_id)) {                    $list_return_category[$key]->list = !is_array($list_return_category[$key]->list) ? array() : $list_return_category[$key]->list;                    $list_return_category[$key]->list_small_product = !is_array($list_return_category[$key]->list_small_product) ? array() : $list_return_category[$key]->list_small_product;                    if (count($list_return_category[$key]->list) < $max_product) {                        $list_return_category[$key]->list[] = $product;                    } else if (count($list_return_category[$key]->list_small_product) < $max_view_small_product) {                        $list_return_category[$key]->list_small_product[] = $product;                    }                }            }        }        return $list_return_category;    }}