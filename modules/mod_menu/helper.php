<?php/** * @package     Joomla.Site * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2016 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */use Joomla\Registry\Registry;defined('_JEXEC') or die;/** * Helper for mod_menu * * @package     Joomla.Site * @subpackage  mod_menu * @since       1.5 */class ModMenuHelper{	public static $list_route=null;	protected static $instances =null;	public static function getInstance()	{		if (empty(static::$instances))		{			static::$instances = new static();		}		return static::$instances;	}	/**	 * Get a list of the menu items.	 *	 * @param   \Joomla\Registry\Registry  &$params  The module options.	 *	 * @return  array	 *	 * @since   1.5	 */	public static function getList(&$params)	{		$app = JFactory::getApplication();		$menu = $app->getMenu();		// Get active menu item		$base = self::getBase($params);		$user = JFactory::getUser();		$levels = $user->getAuthorisedViewLevels();		$menu_show=$params->get('menu_show',array());		if(in_array(0,$menu_show))		{			$menu_show=array();		}		asort($levels);		$key = 'menu_items' . $params . implode(',', $levels) . '.' . $base->id;		$cache = JFactory::getCache('mod_menu', '');		if (!($items = $cache->get($key)))		{			$path           = $base->tree;			$start          = (int) $params->get('startLevel');			$end            = (int) $params->get('endLevel');			$showAll        = $params->get('showAllChildren');			$items          = $menu->get_items_by_menu_type( $params->get('menutype'));			$hidden_parents = array();			$lastitem       = 0;			if ($items)			{				foreach ($items as $i => $item)				{					if (($start && $start > $item->level)						|| ($end && $item->level > $end)						|| (!$showAll && $item->level > 1 && !in_array($item->parent_id, $path))						|| ($start > 1 && !in_array($item->tree[$start - 2], $path)))					{						unset($items[$i]);						continue;					}					// Exclude item with menu item option set to exclude from menu modules					if (($item->params->get('menu_show', 1) == 0) || in_array($item->parent_id, $hidden_parents))					{						$hidden_parents[] = $item->id;						unset($items[$i]);						continue;					}					$item->deeper     = false;					$item->shallower  = false;					$item->level_diff = 0;					if (isset($items[$lastitem]))					{						$items[$lastitem]->deeper     = ($item->level > $items[$lastitem]->level);						$items[$lastitem]->shallower  = ($item->level < $items[$lastitem]->level);						$items[$lastitem]->level_diff = ($items[$lastitem]->level - $item->level);					}					//$item->parent = (boolean) $menu->getItems('parent_id', (int) $item->id, true);					$lastitem     = $i;					$item->active = false;					$item->flink  = $item->link;					// Reverted back for CMS version 2.5.6					switch ($item->type)					{						case 'separator':						case 'heading':							// No further action needed.							continue;						case 'url':							if ((strpos($item->link, 'index.php?') === 0) && (strpos($item->link, 'Itemid=') === false))							{								// If this is an internal Joomla link, ensure the Itemid is set.								$item->flink = $item->link . '&Itemid=' . $item->id;							}							break;						case 'alias':							$item->flink = 'index.php?Itemid=' . $item->params->get('aliasoptions');							break;						default:							$item->flink = 'index.php?Itemid=' . $item->id;							break;					}					if (strcasecmp(substr($item->flink, 0, 4), 'http') && (strpos($item->flink, 'index.php?') !== false))					{						$router_md5=md5($item->flink);						if(!isset(static::$list_route[$router_md5]))						{							static::$list_route[$router_md5]=JRoute::_($item->flink, true, $item->params->get('secure'));						}						$item->flink = static::$list_route[$router_md5];					}					else					{						$router_md5=md5($item->flink);						if(!isset(static::$list_route[$router_md5]))						{							static::$list_route[$router_md5]=JRoute::_($item->flink, true, $item->params->get('secure'));						}						$item->flink = static::$list_route[$router_md5];					}					// We prevent the double encoding because for some reason the $item is shared for menu modules and we get double encoding					// when the cause of that is found the argument should be removed					$item->title        = htmlspecialchars($item->title, ENT_COMPAT, 'UTF-8', false);					$item->anchor_css   = htmlspecialchars($item->params->get('menu-anchor_css', ''), ENT_COMPAT, 'UTF-8', false);					$item->anchor_title = htmlspecialchars($item->params->get('menu-anchor_title', ''), ENT_COMPAT, 'UTF-8', false);					$item->anchor_rel = htmlspecialchars($item->params->get('menu-anchor_rel', ''), ENT_COMPAT, 'UTF-8', false);					$item->menu_image   = $item->params->get('menu_image', '') ?						htmlspecialchars($item->params->get('menu_image', ''), ENT_COMPAT, 'UTF-8', false) : '';				}				if (isset($items[$lastitem]))				{					$items[$lastitem]->deeper     = (($start?$start:1) > $items[$lastitem]->level);					$items[$lastitem]->shallower  = (($start?$start:1) < $items[$lastitem]->level);					$items[$lastitem]->level_diff = ($items[$lastitem]->level - ($start?$start:1));				}			}			$cache->store($items, $key);		}		return $items;	}	public function render_module_menucategory($module){		$params=$module->params;		$get_tree_ul_li = function ($function_call_back, $root_id = 1, &$tree_ul_li, $list_all_menu, $list_tree_menu,$max_item, $level = 0) {			$menu_item = $list_all_menu[$root_id];			if ($menu_item) {				$menu_image=$menu_item->params->get('menu_image','');				$tree_ul_li .= '<li class="menu-iem menu-iem-'.$menu_item->id.' level-'.$level.'" ><a data-menu_id="'.$menu_item->id.'"  href="' . $menu_item->flink.'"><img data-src="'.JUri::root().$menu_image.'"><span>' . $menu_item->title . '</span></a>';				$tree_ul_li .= count($list_tree_menu[$root_id]) ? '<ul class="level-'.$level.'">' : '';			}			$total_item=0;			foreach ($list_tree_menu[$root_id] as $a_menu_item) {				$root_id1 = $a_menu_item->id;				$level1 = $level + 1;				if($total_item>=$max_item)				{					break;				}				$total_item++;				$function_call_back($function_call_back, $root_id1, $tree_ul_li, $list_all_menu, $list_tree_menu, $max_item,$level1);			}			if ($menu_item) {				$tree_ul_li .= count($list_tree_menu[$root_id]) ? '</ul>' : '';				$tree_ul_li .= '</li>';			}		};		$id = '';		if (($tagId = $params->get('tag_id', ''))) {			$id = ' id="' . $tagId . '"';		}		$menu_show = $params->get('menu_show', array());		if (in_array(0, $menu_show)) {			$menu_show = array();		}		$helper=ModMenuHelper::getInstance();		$list       = $helper->getList($params);		$base       = $helper->getBase($params);		$active     = $helper->getActive($params);		$default    = $helper->getDefault();		$active_id  = $active->id;		$default_id = $default->id;		$path       = $base->tree;		$showAll    = $params->get('showAllChildren');		$class_sfx  = htmlspecialchars($params->get('class_sfx'), ENT_COMPAT, 'UTF-8');// The menu class is deprecated. Use nav instead		$children_menu_item = array();		$list = JArrayHelper::pivot($list, 'id');		$list1=array();		foreach ($list as $item) {			$item1=new stdClass();			$item1->id=$item->id;			$item1->parent_id=$item->parent_id;			$item1->title=$item->title;			$item1->link=$item->link;			$item1->flink=$item->flink;			$item1->params=$item->params;			$list1[]=$item1;		}		foreach ($list1 as $v) {			$pt = $v->parent_id;			$temp=new Registry();			$temp->set('menu_image',$v->params->get('menu_image',''));			$v->params=$temp;			$pt = ($pt == '' || $pt == $v->id) ? 'list_root' : $pt;			$temp_list = @$children_menu_item[$pt] ? $children_menu_item[$pt] : array();			array_push($temp_list, $v);			$children_menu_item[$pt] = $temp_list;		}		$tree_ul_li = '';		$tree_ul_li .= '<ul class="level-0">';		$root_id=$params->get('base',1);		$max_item=5;		$get_tree_ul_li($get_tree_ul_li, $root_id, $tree_ul_li, $list, $children_menu_item, $max_item,0);		$tree_ul_li .= '</ul>';		return $tree_ul_li;	}	/**	 * Get base menu item.	 *	 * @param   \Joomla\Registry\Registry  &$params  The module options.	 *	 * @return  object	 *	 * @since	3.0.2	 */	public static function getBase(&$params)	{		// Get base menu item from parameters		if ($params->get('base'))		{			$base = JFactory::getApplication()->getMenu()->getItem($params->get('base'));		}		else		{			$base = false;		}		// Use active menu item if no base found		if (!$base)		{			$base = self::getActive($params);		}		return $base;	}	/**	 * Get active menu item.	 *	 * @param   \Joomla\Registry\Registry  &$params  The module options.	 *	 * @return  object	 *	 * @since	3.0.2	 */	public static function getActive(&$params)	{		$menu = JFactory::getApplication()->getMenu();		return $menu->getActive() ? $menu->getActive() : self::getDefault();	}	/**	 * Get default menu item (homepage) for current language.	 *	 * @return  object	 */	public static function getDefault()	{		$menu = JFactory::getApplication()->getMenu();		$lang = JFactory::getLanguage();		// Look for the home menu		if (JLanguageMultilang::isEnabled())		{			return $menu->getDefault($lang->getTag());		}		else		{			return $menu->getDefault();		}	}}